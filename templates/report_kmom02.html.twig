{% extends "base.html.twig" %}

{% block title %}Redovisning för kmom – Webbutveckling{% endblock %}

{% block body %}
    <style>
        /* Importera Google Fonts */
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;700&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Source+Code+Pro&display=swap');

        /* Allmänna Stilar */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f4f7fc;
            color: #333;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            line-height: 1.4;
        }

        .container {
            width: 80%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        header {
            background: linear-gradient(135deg, #6c5ce7, #00bcd4);
            color: white;
            padding: 30px 0;
            text-align: center;
            border-radius: 10px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        }

        header h1 {
            font-size: 2.5rem;
            margin: 0;
            font-weight: 700;
            letter-spacing: 1px;
            text-transform: uppercase;
        }

        /* Rapport Container */
        .report-container {
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 30px;
            margin-top: 40px;
            color: #333;
            font-size: 1rem;
        }

        .report-container h2 {
            font-size: 1.6rem;
            color: #1a73e8;
            margin-bottom: 20px;
            font-weight: 600;
            border-bottom: 2px solid #ddd;
            padding-bottom: 8px;
        }

        .report-container p {
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .report-container code {
            background: #f4f4f4;
            padding: 4px 8px;
            border-radius: 6px;
            font-family: 'Source Code Pro', monospace;
            font-size: 0.9rem;
            color: #d6336c;
        }

        .report-container strong {
            color: #ff5722;
        }

        /* Footer */
        footer {
            text-align: center;
            padding: 15px 0;
            background-color: #1a73e8;
            color: white;
            margin-top: 50px;
            border-radius: 10px;
        }

        /* Responsivitet */
        @media (max-width: 768px) {
            .container {
                width: 90%;
            }

            header h1 {
                font-size: 2rem;
            }

            .report-container h2 {
                font-size: 1.4rem;
            }

            .report-container p {
                font-size: 0.9rem;
            }
        }
    </style>

    <div class="container">
        <header>
            <h1>Redovisning för kmom – Webbutveckling</h1>
        </header>

        <div class="report-container">
            <h2>1. Objektorienterade konstruktioner i PHP</h2>
            <p>
                Arv används för att låta en klass ärva funktionalitet från en annan, vilket främjar återanvändning och struktur. Komposition innebär att objekt byggs upp av andra objekt, vilket ger ökad flexibilitet och bättre separation av ansvar. Interface definierar ett kontrakt som klasser måste uppfylla, vilket möjliggör lös koppling och utbytbara implementationer. Traits används för att dela gemensam funktionalitet mellan klasser utan att använda arv, och bidrar till minskad kod upprepning.
            </p>

            <h2>2. Min implementation</h2>
            <p>
                Jag löste uppgiften genom att kombinera arv, komposition och interface för att skapa en tydlig struktur med hög återanvändbarhet. Traits användes där flera klasser behövde samma hjälpfunktioner. Resultatet blev en fungerande lösning med god läsbarhet, men jag ser förbättringspotential i att förfina klassernas ansvar och minska beroenden i vissa delar av koden.
            </p>

            <h2>3. Reflektion kring Symfony och MVC</h2>
            <p>
                Att arbeta med Symfony enligt MVC-modellen har gett mig en djupare förståelse för hur man organiserar applikationskod på ett skalbart och underhållbart sätt. Separationen mellan modell, vy och kontroll främjar tydlighet, men kräver också disciplin och planering för att fullt ut dra nytta av ramverkets möjligheter.
            </p>

            <h2>4. TIL (Today I Learned)</h2>
            <p>
                Jag har fördjupat min förståelse för hur Symfony hanterar beroendeinjektion, routing och tjänsteregistrering. Jag har också insett värdet av att hålla klasser små, fokuserade och testbara för att underlätta framtida vidareutveckling.
            </p>
        </div>

        <footer>
            <p>&copy; 2025 Webbutveckling - All Rights Reserved</p>
        </footer>
    </div>
{% endblock %}
